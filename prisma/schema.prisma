// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum Role {
  USER
  ADMIN
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  DONE
}

enum TicketType {
  BUG
  FEATURE
  TASK
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
}

model Comment {
  id                 Int      @id @default(autoincrement())
  name               String
  body               String
  createdAt          DateTime @default(now())
  createdBy          User     @relation(fields: [createdByUserEmail], references: [email])
  createdByUserEmail String
  ticket             Ticket   @relation(fields: [ticketId], references: [id])
  ticketId           String
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  name            String?
  password        String?
  image           String?
  emailVerified   DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  role            Role      @default(USER)
  ticketsCreated  Ticket[]  @relation(name: "createdBy")
  ticketsAssigned Ticket[]  @relation(name: "assignedTo")
  comments        Comment[]
  accounts        Account[]
}

model Project {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tickets   Ticket[]
}

model Ticket {
  id              String       @id @default(cuid())
  title           String
  body            String
  status          TicketStatus @default(OPEN)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  createdBy       User         @relation(name: "createdBy", fields: [createdByUserId], references: [id])
  createdByUserId String
  assignedTo      User?        @relation(name: "assignedTo", fields: [assignedToId], references: [id])
  assignedToId    String?
  comments        Comment[]
  project         Project      @relation(fields: [projectName], references: [name])
  projectName     String
  type            TicketType   @default(BUG)
  priority        TicketPriority @default(MEDIUM)

}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
