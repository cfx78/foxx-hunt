// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  DONE
}

enum TicketType {
  BUG
  FEATURE
  TASK
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
}

type Comment {
  body      String
  createdAt DateTime @default(now())
  userName  String
  userEmail String
}

model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  email           String    @unique
  name            String?
  password        String?
  image           String?
  emailVerified   DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  role            Role      @default(USER)
  ticketsCreated  Ticket[]  @relation(name: "createdBy")
  ticketsAssigned Ticket[]  @relation(name: "assignedTo")
  comments        Comment[]
  accounts        Account[]
  projects        Project[] @relation(fields: [projectIds], references: [id])
  projectIds      String[]  @db.ObjectId
}

model Project {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tickets   Ticket[]
  users     User[]   @relation(fields: [userIds], references: [id])
  userIds   String[] @db.ObjectId
}

model Ticket {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  body            String
  status          TicketStatus   @default(OPEN)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  createdBy       User           @relation(name: "createdBy", fields: [createdByUserId], references: [id])
  createdByUserId String         @db.ObjectId
  assignedTo      User?          @relation(name: "assignedTo", fields: [assignedToId], references: [id])
  assignedToId    String?        @db.ObjectId
  comments        Comment[]
  project         Project        @relation(fields: [projectName], references: [name])
  projectName     String
  type            TicketType     @default(BUG)
  priority        TicketPriority @default(MEDIUM)
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
